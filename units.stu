// Make sure we are reset before starting the test routines
runner (

  name: Db Reset 0x1,
  
  forge {
    MessageType: UnitTest,
    TestAction: Reset,
  },
),


// Reference
// - MessageType
// - MessageTarget
// - NodeType
// - NodeState
// - NodeService
// - NodeRegister
// - TextContent
// - TestAction


test (

  name: Register SpringA,
  
  forge {
    MessageType: GsnRegistration,
    NodeType: Org,
    NodeService: Dvsp,
    TextContent: SpringA,HostA,  
  },
  
  expects {
    Result: Response,
    Frame: FrameResponse,
    Content: Ok
  }
),

test (

  name: Check SpringA,
  
  forge {
    MessageType: GsnNodeStatus,
    TextContent: SpringA,
  },
  
  expects {
    Result: Response,
    Frame: FrameNodeStatus,
    Content: Disabled,
  }
),

test (

  name: Duplicate Springname,
  
  forge {
    MessageType: GsnRegistration,
    NodeType: Org,
    NodeService: Dvsp,
    TextContent: SpringA,abcd,
  },
  
  expects {
    Result: Response,
    Frame: FrameResponse,
    Content: NetspaceDuplication,
  }
),

test (

  name: Duplicate Hostname,
  
  forge {
    MessageType: GsnRegistration,
    NodeType: Org,
    NodeService: Dvsp,
    TextContent: SpringZ,HostA,
  },
  
  expects {
    Result: Response,
    Frame: FrameResponse,
    Content: NetspaceDuplication,
  }
),

test (

  name: Enabled SpringA,
  
  forge {
    MessageType: GsnStateUpdate,
    NodeState: Enabled
    TextContent: SpringA,
  },
  
  expects {
    Result: Response,
    Frame: FrameResponse,
    Content: Ok,
  }
),

test (

  name: Recheck SpringA,
  
  forge {
    MessageType: GsnNodeStatus,
    TextContent: SpringA,
  },
  
  expects {
    Result: Response,
    Frame: FrameNodeStatus,
    Content: Enabled,
  }
),

test (

  name: Register SpringB,
  
  forge {
    MessageType: GsnRegistration,
    NodeType: Org,
    NodeService: Dvsp,
    TextContent: SpringB,HostB,
  },
  
  expects {
    Result: Response,
    Frame: FrameResponse,
    Content: Ok,
  }
),

test (

  name: Request Area 2x,
  
  forge {
    MessageType: GsnArea,
  },
  
  expects {
    Result: Response,
    Frame: FrameNetwork,
    Content: SpringA,HostA,127.0.0.1;SpringB,HostB,127.0.0.1;,
  }
),
