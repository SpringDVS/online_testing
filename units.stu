// Make sure we are reset before starting the test routines
runner (

  name: Db Reset 0x1,
  
  forge {
    MessageType: UnitTest,
    TestAction: Reset,
  },
),


// Reference
// - MessageType
// - MessageTarget
// - NodeType
// - NodeState
// - NodeService
// - NodeRegister
// - TextContent
// - TestAction


test (

  name: Register SpringA,
  
  forge {
    MessageType: GsnRegistration,
    NodeType: Org,
    NodeService: Dvsp,
    TextContent: SpringA,HostA,  
  },
  
  expects {
    Result: Response,
    Frame: FrameResponse,
    Content: Ok
  }
),

test (

  name: Check SpringA Status,
  
  forge {
    MessageType: GsnNodeStatus,
    TextContent: SpringA,
  },
  
  expects {
    Result: Response,
    Frame: FrameNodeStatus,
    Content: Disabled,
  }
),

test (

  name: Update Enable SpringA,
  
  forge {
    MessageType: GsnStateUpdate,
    NodeState: Enabled
    TextContent: SpringA,
  },
  
  expects {
    Result: Response,
    Frame: FrameResponse,
    Content: Ok,
  }
),

test (

  name: Recheck SpringA Status,
  
  forge {
    MessageType: GsnNodeStatus,
    TextContent: SpringA,
  },
  
  expects {
    Result: Response,
    Frame: FrameNodeStatus,
    Content: Enabled,
  }
),

test (

  name: Register SpringB,
  
  forge {
    MessageType: GsnRegistration,
    NodeType: Org,
    NodeService: Dvsp,
    TextContent: SpringB,HostB,
  },
  
  expects {
    Result: Response,
    Frame: FrameResponse,
    Content: Ok,
  }
),

test (

  name: Request Area 2xNode,
  
  forge {
    MessageType: GsnArea,
  },
  
  expects {
    Result: Response,
    Frame: FrameNetwork,
    Content: SpringA,HostA,127.0.0.1;SpringB,HostB,127.0.0.1;,
  }
),

test (
  name: Unregister SpringA,

  forge {
    MessageType: GsnRegistration,
    NodeRegister: False,
    TextContent: SpringA,HostA,
  }

  expects {
    Result: Response,
    Frame: FrameResponse,
    Content: Ok,
  }
)



test (

  name: Request Area 1xNode,
  
  forge {
    MessageType: GsnArea,
  },
  
  expects {
    Result: Response,
    Frame: FrameNetwork,
    Content: SpringB,HostB,127.0.0.1;,
  }
),



test (

  name: Register SpringRoot,
  
  forge {
    MessageType: GsnRegistration,
    NodeType: Root,
    NodeService: Dvsp,
    TextContent: SpringRoot,HostRoot,  
  },
  
  expects {
    Result: Response,
    Frame: FrameResponse,
    Content: Ok
  }
),



test (

  name: SpringRoot NodeInfo,
  
  forge {
    MessageType: GsnNodeInfo,
    TextContent: SpringRoot,
  },
  
  expects {
    Result: Response,
    Frame: FrameNodeInfo,
    Content: 1;Dvsp;127.0.0.1;SpringRoot,HostRoot,
  }
),

test (
  name: Request Org Nodes,

  forge {
    MessageType: GsnTypeRequest,
    NodeType: Org,
  },

  expects {
    Result: Response,
    Frame: FrameNetwork,
    Content: SpringB,HostB,127.0.0.1;,
  }
)

test (
  name: Request Root Nodes,

  forge {
    MessageType: GsnTypeRequest,
    NodeType: Root,
  },

  expects {
    Result: Response,
    Frame: FrameNetwork,
    Content: SpringRoot,HostRoot,127.0.0.1;,
  }
)




// Error outs

test (

  name: Registration Error NetspaceDuplication Springname,
  
  forge {
    MessageType: GsnRegistration,
    NodeType: Org,
    NodeService: Dvsp,
    TextContent: SpringB,abcd,
  },
  
  expects {
    Result: Response,
    Frame: FrameResponse,
    Content: NetspaceDuplication,
  }
),

test (

  name: Registration Error NetspaceDuplication Hostname,
  
  forge {
    MessageType: GsnRegistration,
    NodeType: Org,
    NodeService: Dvsp,
    TextContent: SpringZ,HostB,
  },
  
  expects {
    Result: Response,
    Frame: FrameResponse,
    Content: NetspaceDuplication,
  }
),


test (

  name: NodeInfo Error Netspace,
  
  forge {
    MessageType: GsnNodeInfo,
    TextContent: VoidNode,
  },
  
  expects {
    Result: Response,
    Frame: FrameResponse,
    Content: NetspaceError,
  }
),


test (

  name: NodeStatus Error Netspace,
  
  forge {
    MessageType: GsnNodeStatus,
    TextContent: SpringZ,
  },
  
  expects {
    Result: Response,
    Frame: FrameResponse,
    Content: NetspaceError,
  }
),


test (

  name: NodeState Error Netspace,
  
  forge {
    MessageType: GsnStateUpdate,
    NodeState: Enabled
    TextContent: SpringZ,
  },
  
  expects {
    Result: Response,
    Frame: FrameResponse,
    Content: NetspaceError,
  }
),
